#.IGNORE
#.id: soot_overview

# Comments start with #.
# Flows start with ===
=== flow_node # an array with an id
	
	Text without a speaker. 
	
	# Speakers.
	john: Text spoken by John.
	: Text spoken by last speaker, John.
	
	# Markdown formatting.
	Some *italic*, **bold** and ***bold italic*** text.
	
	# BBCode.
	Some [b;tomato]bold red text[] and some [i;deep_sky_blue]italic blue text.[]
	
	# Inserting state values to text.
	The current score is [$score;b;cyan].
	
	# Effecting the animation.
	We can pause[wait] the text.
	We can hold until the user presses something.[hold] And then show some more text.
	We can [pace=2]speed up the speed of the speaker.[pace=0.25] Or slow it down.
	
	# Calling actions at points in the animation.
	Actions can be called at a point [!@camera zoom 2.0]. Got it?
	Like any other tag [!@camera zoom;!@camera shake;!~score += 20] you can combine multiple in one.
	
	# Multiline text.
	""""
	You can place *lots* of formatted text in one block.
			*Tabs*
				will
					be
						preserved.
	
	As will **whitespace**.
	""""
	
	# Multiline with a speaker and condition.
	paul: """" {{score > 20}}
	I don't care what [b]they[] say, it's not happening.
	
		(He turned to look at the shore.)
	
	Not now, not ever.
	""""
	
	# Flow control.
	=> goto_flow # Goto a flow.
	== call_flow # Call a flow, then return back to this line.
	
	# Action: State assignment
	~score += 20
	~time.day += 1
	# Action: State methods.
	@time.goto_next_day
	@player.set_job baker tint:beige pay:12.50
	
	# Action: Global methods.
	@camera shake $x time:3.0 wait:true x:$y # nodes_in_group("sa:camera").camera("shake", x, { "wait": true, "x": y})
	@camera.shake $x time:3.0 wait:true x:$y # nodes_in_group("sa:camera").shake(x, { "wait": true, "x": y })
	
	# BBCode with actions.
	Wait a minute, that means[!~camera.zoom 1;b;i;~$score += 20] this was a...[!~camera.zoom] murder!
	
	# Conditions: if-elif-else
	Line only shown if condition is met. {{score > 20}}
	
	{{score > 20}}
		Multiple lines.
		Together under one conditional.
	{{elif score == 10}}
		Score is ten.
	{{else}}
		A line to show instead.
	
	# Conditions: match
	{{match time.weekday}}
		{{MONDAY}} @sfx sad_audio
		{{TUESDAY}} john: Glad [b]mondays[] over.
		{{WEDNESDAY}} It's the middle of the week.
		{{THURSDAY}}
			john: The whole vibe shifts on thursday!
		{{FRIDAY}} @sfx happy_audio
			john: Aw yeah, friday!
		{{_}} It's the weekend.
	
	# Extra properties.
	This text should be offset.
		|x:20 y:30
		|tint:red
	
	# Or, on a single line.
	This text should be offset. ((|x:20 y:30 tint:red))

=== choices

	# Some simple options.
	Are you sure about that?
		|> Yes
		|> No
		|> Maybe
	
	# Text can proceed below them.
	police: This suspect, do you remember their hair color?
		|> Red
			police: Red, hmm?
		|> Green
			police: Green you say?
			police: Are you lying to me?
				|> No, honest!
					police: I don't believe it.
						|> You better.
						|> All right, it was a lie.
							police: Thought so.
				|> Yeah, it was red.
					police: Thought so.
		|> Black
			police: Hmm.
	
	Are you sure? || |> Yes => yes || |> No => no
	
	john: Are you sure? {{score > 20}}
	
	==||j: Wow, who knew?
		j: I was saying this would happen.
			&:score:3 x:20
	
	# It's ((rand: winter again|summer again|spring again)).
	# It's ((once: winter again|summer again|spring again)).
	
	Is it time || john: okay {{score > 20}}
	
	(()) # shows all until last, then only shows last.
	((once)) # shows each, then never again.
		john: Hey.{{score > 20}}
		john: You again. {{score > 20}}
		john: Oh, it's you again.
		john: You're back again!?
	((loop)) # repeat from start
	((ping_pong)) {{score > 20}} # go backwards then forwards
	((rand))
		john: Okay, and so what about it?
		john: The muskrat came in slowly.
		paul: Oh wow, who the hell cares?
		==||j: Wow, who knew. # inline call. specifically for sets
			j: Even though I told you this would happen.
	((rand_once)) # random, but never picks same one twice in a row
	((rand_full)) # never picks same item twice, until all have been picked
	
	<> checkpoint # we can come back here later
	{{match <> checkpoint}}
		{{0}}
			traveler: Which direction shall we go?		#id=the_choice
				+> traveler_nsw
				+> traveler_w
				+> exo_*
		{{_}}
			traveler: Now again, which direction shall we go?
				-ok: false
				|> North => north || ok || => ok || >><<
				|> South => south
				|> East ||-t:20 || @score.20
				|> West
					traveler: I don't go west.
					<| # go back to a checkpoint
	
	john: It's all true.
	
	# Options.
	Which animal will you set free from the zoo?
		|> The lion
			A line to show after option 1 is chosen.
		|> Option two. || ~score += 10||== add_to_flow||~score -= 20
		|> Option [b]three[]. {{score > 20}} # Only shown on condition score > 20.
		+> add_options_from_a_flow
		+> *_flow # Append options from all flows ending with '_flow'.
		+> flow_* # Append options from all flows starting with 'flow_'
	
	# Single line options.
	# Don't do this though, as it's hard to read.
	


# when loading a script, flags can be used to hide/show some lines.
# found in Dialogues.flags = []
# TODO
=== import_flags
	# special compiler flag test.
	# must be on the first tab of a flow
	#? lang:en
	Text without a speaker. 
		?fr Text without a speaker
	#?
	
	# Speakers.
	john: Text spoken by John.
		?fr john: Text spoken by John.
	
	: Text spoken by last speaker, John.
